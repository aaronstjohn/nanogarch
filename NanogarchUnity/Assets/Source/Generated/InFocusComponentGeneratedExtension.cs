//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        static readonly InFocusComponent inFocusComponent = new InFocusComponent();

        public bool isInFocus {
            get { return HasComponent(CoreComponentIds.InFocus); }
            set {
                if(value != isInFocus) {
                    if(value) {
                        AddComponent(CoreComponentIds.InFocus, inFocusComponent);
                    } else {
                        RemoveComponent(CoreComponentIds.InFocus);
                    }
                }
            }
        }

        public Entity IsInFocus(bool value) {
            isInFocus = value;
            return this;
        }
    }

    public partial class Context {

        public Entity inFocusEntity { get { return GetGroup(CoreMatcher.InFocus).GetSingleEntity(); } }

        public bool isInFocus {
            get { return inFocusEntity != null; }
            set {
                var entity = inFocusEntity;
                if(value != (entity != null)) {
                    if(value) {
                        CreateEntity().isInFocus = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherInFocus;

        public static IMatcher InFocus {
            get {
                if(_matcherInFocus == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.InFocus);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherInFocus = matcher;
                }

                return _matcherInFocus;
            }
        }
    }
