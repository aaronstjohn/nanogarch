//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        static readonly CommandPickerEnabledComponent commandPickerEnabledComponent = new CommandPickerEnabledComponent();

        public bool isCommandPickerEnabled {
            get { return HasComponent(UIComponentIds.CommandPickerEnabled); }
            set {
                if(value != isCommandPickerEnabled) {
                    if(value) {
                        AddComponent(UIComponentIds.CommandPickerEnabled, commandPickerEnabledComponent);
                    } else {
                        RemoveComponent(UIComponentIds.CommandPickerEnabled);
                    }
                }
            }
        }

        public Entity IsCommandPickerEnabled(bool value) {
            isCommandPickerEnabled = value;
            return this;
        }
    }

    public partial class Context {

        public Entity commandPickerEnabledEntity { get { return GetGroup(UIMatcher.CommandPickerEnabled).GetSingleEntity(); } }

        public bool isCommandPickerEnabled {
            get { return commandPickerEnabledEntity != null; }
            set {
                var entity = commandPickerEnabledEntity;
                if(value != (entity != null)) {
                    if(value) {
                        CreateEntity().isCommandPickerEnabled = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }
}

    public partial class UIMatcher {

        static IMatcher _matcherCommandPickerEnabled;

        public static IMatcher CommandPickerEnabled {
            get {
                if(_matcherCommandPickerEnabled == null) {
                    var matcher = (Matcher)Matcher.AllOf(UIComponentIds.CommandPickerEnabled);
                    matcher.componentNames = UIComponentIds.componentNames;
                    _matcherCommandPickerEnabled = matcher;
                }

                return _matcherCommandPickerEnabled;
            }
        }
    }
